{"version":3,"sources":["Card.js","CardArray.js","SearchBox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","id","name","email","className","src","alt","CardArray","robots","map","user","index","SearchBox","searchChange","type","placeholder","onChange","App","onSearchange","event","setState","searchField","target","value","state","fetch","then","response","json","users","filteredRobots","this","filter","robo","toLowerCase","includes","length","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAeeA,EAbF,SAACC,GACZ,IAAQC,EAAoBD,EAApBC,GAAIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAClB,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,cACpD,gCACE,6BAAKJ,IACL,4BAAIC,WCOGI,EAbG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OAAOA,EAAOC,KAAI,SAACC,EAAMC,GACvB,OACE,cAAC,EAAD,CAEEV,GAAIO,EAAOG,GAAOV,GAClBC,KAAMM,EAAOG,GAAOT,KACpBC,MAAOK,EAAOG,GAAOR,OAHhBK,EAAOG,GAAOV,QCQZW,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKT,UAAU,MAAf,SACE,uBACEU,KAAK,SACLC,YAAY,SACZX,UAAU,mCACVY,SAAUH,OCsCHI,E,kDAzCb,aAAe,IAAD,8BACZ,gBAaFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,YAAaF,EAAMG,OAAOC,SAd5B,EAAKC,MAAQ,CACXhB,OAAQ,GACRa,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEZ,OAAQqB,S,oBAS7C,WAAU,IAAD,OACDC,EAAiBC,KAAKP,MAAMhB,OAAOwB,QAAO,SAACC,GAC/C,OAAOA,EAAK/B,KACTgC,cACAC,SAAS,EAAKX,MAAMH,YAAYa,kBAGrC,OAAiC,IAA7BH,KAAKP,MAAMhB,OAAO4B,OACb,4CAGL,sBAAKhC,UAAU,KAAf,UACE,oBAAIA,UAAU,QAAd,0BACA,cAAC,EAAD,CAAWS,aAAckB,KAAKb,eAC9B,cAAC,EAAD,CAAWV,OAAQsB,W,GAnCXO,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4e604f32.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = (props) => {\r\n  const { id, name, email } = props;\r\n  return (\r\n    <div className=\"tc bg-light-green dib pr3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"No Source\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardArray = ({ robots }) => {\r\n  return robots.map((user, index) => {\r\n    return (\r\n      <Card\r\n        key={robots[index].id}\r\n        id={robots[index].id}\r\n        name={robots[index].name}\r\n        email={robots[index].email}\r\n      />\r\n    );\r\n  });\r\n};\r\n\r\nexport default CardArray;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport CardArray from \"./CardArray\";\r\nimport SearchBox from \"./SearchBox\";\r\n// import { robots } from \"./robots\";\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => this.setState({ robots: users }));\r\n  }\r\n\r\n  onSearchange = (event) => {\r\n    this.setState({\r\n      searchField: event.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter((robo) => {\r\n      return robo.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchField.toLowerCase());\r\n    });\r\n\r\n    if (this.state.robots.length === 0) {\r\n      return <h1>Loading...</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"title\">robotfriends</h1>\r\n          <SearchBox searchChange={this.onSearchange} />\r\n          <CardArray robots={filteredRobots} />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}